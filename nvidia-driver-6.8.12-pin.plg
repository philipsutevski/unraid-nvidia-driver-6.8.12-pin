<?xml version="1.0" encoding="utf-8"?>
<PLUGIN name="nvidia-driver-6.8.12-pin" author="unraid" version="2024.01.19" launch="Settings/nvidia-driver" min="6.9.0-beta31" support="https://forums.unraid.net/topic/98978-plugin-nvidia-driver/">

<CHANGES>Pinned variant: installs the official Unraid Nvidia plugin and forces it to use the 6.8.12-Unraid release tag (and official repo) when listing/downloading drivers.</CHANGES>

<FILE Run="/bin/bash">
<INLINE><![CDATA[
set -e

PLUGIN_DIR="/boot/config/plugins/nvidia-driver"
EMHTTP_DIR="/usr/local/emhttp/plugins/nvidia-driver"
PACKAGES_DIR="/boot/config/plugins/nvidia-driver/packages"

mkdir -p "$PLUGIN_DIR" "$PACKAGES_DIR"

if command -v installplg >/dev/null 2>&1 ; then
  installplg "https://raw.githubusercontent.com/unraid/unraid-nvidia-driver/master/nvidia-driver.plg"
else
  echo "installplg not found; cannot install official plugin automatically" >&2
fi

TAG_OVERRIDE="6.8.12-Unraid"
# Use repo that hosts the desired 6.8.12 assets
REPO_TARGET="ich777/unraid-nvidia-driver"
DRIVER_PIN="470.239.06"

for f in \
  "$EMHTTP_DIR/include/update-check.sh" \
  "$EMHTTP_DIR/include/download.sh" \
  "$EMHTTP_DIR/include/exec.sh"; do
  if [ -f "$f" ]; then
    # point API/DL URLs to target repo regardless of current value (do not touch raw.githubusercontent.com)
    sed -i -E 's|api.github.com/repos/(unraid|ich777)/unraid-nvidia-driver|api.github.com/repos/ich777/unraid-nvidia-driver|g' "$f" 2>/dev/null || true
    sed -i -E 's|github.com/(unraid|ich777)/unraid-nvidia-driver/releases|github.com/ich777/unraid-nvidia-driver/releases|g' "$f" 2>/dev/null || true
    # force tag override
    sed -i 's/^KERNEL_V=.*/KERNEL_V="'"${TAG_OVERRIDE}"'"/' "$f" 2>/dev/null || true
    sed -i 's/^export KERNEL_V=.*/export KERNEL_V="'"${TAG_OVERRIDE}"'"/' "$f" 2>/dev/null || true
  fi
done

if [ ! -f "$PLUGIN_DIR/settings.cfg" ]; then
  echo 'first_installation=true
driver_version=latest
disable_xconfig=false
update_check=false' > "$PLUGIN_DIR/settings.cfg"
fi

mkdir -p "$PACKAGES_DIR/${TAG_OVERRIDE%%-*}"

# Persist pin across reboots: create pin script and ensure it's called from /boot/config/go
PIN_SCRIPT="$PLUGIN_DIR/pin-on-boot.sh"
cat > "$PIN_SCRIPT" <<'EOS'
#!/bin/bash
PLUGIN_DIR="/boot/config/plugins/nvidia-driver"
EMHTTP_DIR="/usr/local/emhttp/plugins/nvidia-driver"
TAG_OVERRIDE="6.8.12-Unraid"
REPO_TARGET="ich777/unraid-nvidia-driver"
DRIVER_PIN="470.239.06"
start_ts=$(date +%s)
# Wait until plugin files exist (up to 180s)
while [ ! -f "$EMHTTP_DIR/include/exec.sh" ] && [ $(( $(date +%s) - start_ts )) -lt 180 ]; do
  sleep 2
done
for f in \
  "$EMHTTP_DIR/include/update-check.sh" \
  "$EMHTTP_DIR/include/download.sh" \
  "$EMHTTP_DIR/include/exec.sh"; do
  [ -f "$f" ] || continue
  sed -i -E 's|api.github.com/repos/(unraid|ich777)/unraid-nvidia-driver|api.github.com/repos/ich777/unraid-nvidia-driver|g' "$f" 2>/dev/null || true
  sed -i -E 's|github.com/(unraid|ich777)/unraid-nvidia-driver/releases|github.com/ich777/unraid-nvidia-driver/releases|g' "$f" 2>/dev/null || true
  sed -i 's/^KERNEL_V=.*/KERNEL_V="'"${TAG_OVERRIDE}"'"/' "$f" 2>/dev/null || true
  sed -i 's/^export KERNEL_V=.*/export KERNEL_V="'"${TAG_OVERRIDE}"'"/' "$f" 2>/dev/null || true
done

# Ensure settings and pin driver version
mkdir -p "$PLUGIN_DIR"
if [ ! -f "$PLUGIN_DIR/settings.cfg" ]; then
  cat > "$PLUGIN_DIR/settings.cfg" <<CFG
first_installation=true
driver_version=latest
disable_xconfig=false
update_check=false
CFG
fi
sed -i "/driver_version=/c\\driver_version=${DRIVER_PIN}" "$PLUGIN_DIR/settings.cfg"
sed -i "/update_check=/c\\update_check=false" "$PLUGIN_DIR/settings.cfg"

# Clear caches and repopulate
rm -f /tmp/nvidia_driver /tmp/nvos_driver /tmp/nvidia_branches
"$EMHTTP_DIR/include/exec.sh" update >/dev/null 2>&1 || true
EOS
chmod +x "$PIN_SCRIPT"

GO_FILE="/boot/config/go"
if [ -f "$GO_FILE" ]; then
  if ! grep -q "/boot/config/plugins/nvidia-driver/pin-on-boot.sh" "$GO_FILE" ; then
    echo "/bin/bash /boot/config/plugins/nvidia-driver/pin-on-boot.sh" >> "$GO_FILE"
  fi
else
  echo "#!/bin/bash" > "$GO_FILE"
  echo "/bin/bash /boot/config/plugins/nvidia-driver/pin-on-boot.sh" >> "$GO_FILE"
  chmod +x "$GO_FILE"
fi
]]></INLINE>
</FILE>

</PLUGIN>